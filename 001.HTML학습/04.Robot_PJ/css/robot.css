@charset "utf-8";
/* 로봇 PJ CSS - robot.css*/
@import url("https://fonts.googleapis.com/css2?family=Black+Ops+One&family=Orbitron:wght@500&display=swap");
/* font-family: 'Black Ops One', cursive;
font-family: 'Orbitron', sans-serif; */

html {
  scroll-behavior: smooth;
  /* 내부 아이디 요소 위치로 이동시 스크롤 애니메이션을 부드럽게 처리하는 속성!
  최상위 요소인 html에 셋팅하면 전체페이지 스크롤에 적용된다. */
}

html,
body {
  margin: 0;
  padding: 0;
}

body {
  /* 가로 스크롤바 숨기기 */
  overflow-x: hidden;
  /* sticky 포지션을 위한 주의사항!
  overflow-x 숨기기 셋팅을 html과 동시에 잡으면 작동하지 않는다. body에만 설정할 것  */
  background: url(../images/bg.jpg) no-repeat fixed top/cover;
  padding-top: 100px;
}
/* 공사중표시 */
/* body * {
  outline: 2px dashed lime;
} */
/* [ 요소 정중앙 정렬법] 

  1. 50%로 밀고 자기크기의 절반만큼 빼기
  예) calc(50% - 특정px)
  - calc() 메서드는 css전용 계산 메서드!
  >사칙연산이 모두 가능함
  여기서는 유동적인 %에서 특정 px를 뺄 때 사용함
  !!!!!!!!!!마이너스 기호 앞뒤 띄어쓰기에 주의하라~!!!!! */

/* 2. top과 left를 50%로 밀고
  자기 크기의 절반만큼 이동하기
  -> transform: translate(-50%, -50%) 사용
  -> -50%는 자기 자신의 가로/세로크기의 절반만큼 반대방향으로 이동한다  */

/* ((css 전용 메서드))
  참고: https://www.w3schools.com/css/css_math_functions.asp */

/* Page logo */
h1#logo {
  position: fixed;

  /* 정중앙 배치 방법1 */
  top: calc(50% - 102px);
  left: calc(50% - 102px);
  /* 102px를 뺀것은 보더크기를 고려한 것이다. */
  /* fixed의 부모는 보이는 화면 */

  /* 정중앙 배치 방법2  */
  /* top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); */

  /* 크기 2배 확대 */
  transform: scale(2);

  width: 200px;
  height: 200px;
  border: 2px solid #ccc;
  border-radius: 50%;
  margin: 0;
  /* 글자 가로 중앙 */
  text-align: center;
  /* 글자 세로 중앙 - 높이값과 동일 */
  /* line-height: 200px; */

  /* 글자색 */
  color: rgb(0, 255, 170);
  /* 글자설정 한번에 */
  /* font: 스타일 두께 크기/줄간격 글자체 
   font: 스두크/줄체 */
  font: 45px/200px "Orbitron";
  /* 글자그림자 x y 블러 색*/
  text-shadow: 2px 2px 5px #000;
  /* 박스 그림자: (내부) x y 블러 (크기) 색*/
  box-shadow: 0 0 20px 5px pink, inset 0 0 20px 5px #000;

  /* 배경 */
  background: pink url(../images/robot_03.png) no-repeat;
  background-position: center 10px;
  background-size: 160px;

  /* 애니메이션: 이지이지반방마 */
  animation: logoAni 2s ease-in-out 2s forwards,
    logoAni2 1s ease-in-out 4s infinite alternate;
}
/* 로고 애니 키프레임 */
@keyframes logoAni {
  /* 시작값 초기설정값과 같으면 생략 가능하다 */
  /* from {
    top: calc(50% - 102px);
    left: calc(50% - 102px);
    transform: scale(2);
  } */
  /* 끝값  */
  80% {
    top: 50px;
    left: 50px;
    transform: scale(1) rotate(0deg);
  }
  100% {
    top: 50px;
    left: 50px;
    transform: scale(1) rotate(20deg);
  }
}
/* 로고 흔들기 키프레임 */
@keyframes logoAni2 {
  0% {
    transform: rotate(20deg);
  }
  100% {
    transform: rotate(-20deg);
  }
}

/***************************
[ CSS로 애니메이션 하기 ]

- 시간에 따라 CSS설정이 변경되어 애니메이션 하도록 키프레임을 설정하고
이것을 호출함으로 의도된 연출을 구현하는 것이 CSS애니메이션이다.

[  애니메이션 키프레임 만들기 ]
- 키프레임이란? 애니메이션 장면을 넣는 코드

1. 두장면 키프레임

@keyframes 키프레임이름{
    from{시작CSS설정}
    to{끝나는CSS설정}
}

또는

@keyframes 키프레임이름{
    0%{시작CSS설정}
    100%{끝나는CSS설정}
}

@keyframes 키프레임이름{
    0%{CSS설정}
    10%{CSS설정}
    20%{CSS설정}
    ...
    80%{CSS설정}
    90%{CSS설정}
    100%{CSS설정}
}
(1) 장면에 대한 시간계산은 어떻게 하나?
-> 전체시간 * 설정된 %/100

(2) 전체 애니메이션 시간은 언제 셋팅하나?
-> 호출시에 셋팅!

[설정된 키프레임 호출 방법]

animation: 이시이지반방마
(이름 시간 이징 지연 반복 방향 마지막상태)

1. 이름(animation-name) : 키프레임 이름
2. 시간(animation-duration) : 애니메이션 동작시간
-> 초단위(s)
3. 이징(animation-timing-function) : easing 가속도
4. 지연(animation-delay) : 애니메이션 시작지연시간(s)
5. 반복(animation-iteration-count) : 애니메이션 반복
- 기본값 1, 숫자를 쓰면 숫자만큼 반복함
- 영원히 infinite(인피니트)
6. 방향(animation-direction) : 시작 -> 끝
- 한번 이상 반복할 경우 반대경로로 애니메이션을 설정
-> alternate : 시작 -> 끝, 끝 -> 시작
7. 마지막 상태(animation-fill-mode) :
- 애니메이션이 끝났을 때 처음으로 돌아가는게 기본
-> forwards (앞쪽에... 즉, 애니 끝장면으로 마무리!)
-> 기본값 : backwards (처음으로)
-> 유의사항: infinite(영원히)일때는 해당사항 없음!

****************************/
/* 내용보기 링크 타이틀 */
.link {
  position: absolute;
  top: 100px;
  right: 50px;
  /* 부모는 보이는 화면 */
  /* 처음에 안보임 */
  opacity: 0;
  animation: opaAni 1s 5s forwards;
}

/* 투명요소 보이게 애니 키프레임 */
@keyframes opaAni {
  10% {
    opacity: 1;
  }

  30% {
    opacity: 0.1;
  }

  60% {
    opacity: 1;
  }

  80% {
    opacity: 0.5;
  }

  100% {
    opacity: 1;
  }
}

/* link a 요소 */
.link a {
  color: lawngreen;
  text-decoration: none;
  /* 글자설정 */
  font: 50px "Black Ops One", cursive;
  /* 글자 그림자 */
  text-shadow: 2px 2px 2px #000;
}

/* 마우스 오버시 */
.link a:hover {
  color: orangered;
  text-decoration: overline;
}

.btnTop {
  position: fixed;
  right: 50px;
  bottom: 50px;
  /* 보이는 화면에 고정 */
  width: 100px;
  height: 100px;
  text-align: center;
  font: 30px/100px "Black Ops One";
  color: blue;
  text-decoration: none;
  background-color: #ccc;
  border-radius: 50%;
  border: 5px outset #fff;
}

/* top 버튼 오버시 */

.btnTop:hover {
  background-color: #ff0;
  color: red;
  border-style: inset;
}
/* 로봇박스 */
.robx {
  /* body에 했던 설정을 여기에함! */
  padding-top: 100px;
  overflow: hidden;
  /* 높이값 */
  height: 980px;
  /* 높이값을 지정한 이유!
    -> 자식요소 #head의 relative포지션에서
    top값을 %로 지정할 경우 부모박스의 크기가
    정해져 있어야 %가 적용된다! */
}
/* 로봇머리 */
#head {
  position: relative;
  /* 부모자격  */
  top: -50%;
  /* 처음에 나가 있음,  */
  width: 250px;
  height: 250px;
  /* 마영오 블록중앙*/
  margin: 0 auto;
  background: url(../images/metal01.jpg) no-repeat center/cover;
  border-radius: 30px 30px 10px 10px;
  box-shadow: 0 0 10px 5px cyan;
}

/* 로봇애니 호출 클래스 : 로봇 머리, 몸 제자리 */
.backAni {
  /* 애니메이션: 이시이지반방마 */
  animation: backAni 1.5s ease-out 3s forwards;
}

/*  로봇 머리 로봇 몸 제자리로 */
@keyframes backAni {
  to {
    top: 0;
    left: 0;
    /* top, left값이 0이란 relative에서 원래 자기있던 위치를 말한다. */
  }
}
/* 키프레임 */

/* 눈공통 */
.eye {
  position: absolute;
  top: 50px;

  /* 나의 부모는? #head */
  width: 45px;
  height: 45px;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  border-radius: 50%;
  background-color: yellow;
  border: 5px double black;
}

/* 눈 1 */
#eye1 {
  /* 나의 부모는? #head */
  left: 50px;
  background-image: url(../images/e1.jpg);
}

/* 눈 2 */
#eye2 {
  left: 150px;
  background-image: url(../images/e2.jpg);
}

#nose {
  position: absolute;
  right: 100px;
  top: 102px;
  width: 50px;
  height: 75px;
  background: url(../images/nose.jpg) no-repeat 0/110% 100%;
  border-radius: 30px;
}

#mouth {
  position: absolute;
  top: 188px;
  left: 77px;
  width: 100px;
  height: 50px;
  background: url(../images/mouth.png) no-repeat 0/100% 100%;
}
/* 귀공통 */
.ear {
  position: absolute;
  width: 50px;
  top: 70px;
  height: 60px;
  background: url(../images/metal02.jpg) no-repeat 0/100% 100%;
  box-shadow: 0 0 10px 5px cyan;
}

#ear1 {
  left: -50px;
  border-radius: 30px 0 0 30px;
}
#ear2 {
  right: -50px;
  border-radius: 0 30px 30px 0;
}

#ear1 {
  left: -50px;
}
#ear2 {
  right: -50px;
}
/* 로봇 몸 */
#body {
  position: relative;
  /* 부모자격 */

  /* 처음에 왼쪽으로 나가있음 */
  left: -100%;

  width: 250px;
  height: 300px;

  margin: 0 auto;
  margin-top: 50px;
  margin-bottom: 370px;
  background: url(../images/metal01.jpg) no-repeat center/cover;
  border-bottom: 10px solid #555;
  box-shadow: 0 0 10px 5px cyan;
}
#neck {
  position: absolute;
  top: -49px;
  left: 95px;
  width: 60px;
  height: 50px;
  background: url(../images/metal02.jpg) no-repeat 0/100% 100%;
}
/* 팔공통 */

.arm {
  position: absolute;
  top: 20px;
  width: 50px;
  height: 240px;
  background: url(../images/metal02.jpg) repeat-y 0/100%;
  box-shadow: 0 0 10px 5px cyan;
}
/* 팔1 */
#arm1 {
  left: -60px;
  border-radius: 20px 0 0 0;
}
/* 팔2 */
#arm2 {
  right: -60px;
  border-radius: 0 20px 0 0;
}

/* 가상요소로 집게손 만들기 */

.arm::before {
  content: "";
  display: block;
  position: absolute;
  bottom: -70px;
  left: -20px;
  /*  부모는 .arm */
  width: 80px;
  height: 80px;
  border: 3px solid rgb(99, 96, 96);
  border-radius: 50%;
  background-color: #ccc;
  box-sizing: border-box;
  box-shadow: 0 0 10px 5px cyan;
}
.arm::after {
  content: "";
  display: block;
  position: absolute;
  bottom: -70px;
  left: 15px;
  width: 10px;
  height: 40px;
  border-radius: 5px;
  background-color: rgb(103, 103, 103);
  /* 개별 설정을 개별적으로 넣어라! 그냥  background를 쓰면, 다른 백그라운드를 다 덮어버림 */
}

/* 다리공통 */

.leg {
  position: absolute;
  top: 310px;
  z-index: -1;
  width: 80px;
  height: 300px;
  background: url(../images/metal02.jpg) repeat-y 0/100%;
  box-shadow: 0 0 10px 5px cyan;
}

#leg1 {
  left: 0;
}

#leg2 {
  right: 0;
}
.leg::before {
  content: "";
  display: block;
  position: absolute;
  left: -5px;
  bottom: -10px;
  width: 90px;
  height: 60px;
  border: 2px solid #555;
  border-radius: 40px 40px 0 0;
  background-color: #ccc;
  box-sizing: border-box;
}

.sh {
  position: absolute;
  top: -10px;
  width: 80px;
  height: 80px;
  background: url(../images/metal01.jpg) no-repeat center/cover;
  box-shadow: 0 0 10px 5px cyan;
}

/* 어깨 1  */
#sh1 {
  border-radius: 50% 5px 5px 50%;
  left: -80px;
}

/* 어깨 2  */
#sh2 {
  border-radius: 5px 50% 50% 5px;
  right: -80px;
}

/* TV */
#tv {
  position: absolute;
  top: 75px;
  left: 25px;

  width: 200px;
  height: 150px;
  background: url(../images/tv.jpg) no-repeat 0/100% 100%;
}
/* 스크린 */
#screen {
  position: absolute;
  top: 17px;
  left: 12px;
  width: 140px;
  height: 105px; /* 부모는 #tv */
  background-color: black;
  border-radius: 18px;
  /* 넘치는 자식요소 숨기기 */
  overflow: hidden;
}
/* 유튜브 아이프레임 */
#screen iframe {
  position: absolute;
  top: 1px;
  left: -19px;
  /* 부모는 #screen */
  width: 130%;
  height: 100%;
  /* 아이프레임 기본 보더 없앰 */
  border: none;
}

/* 로봇 설명박스 */
#dcbx {
  width: 800px;
  /* 마영오! - 가로중앙 */
  margin: 0 auto;
  /* 하단공간 */
  margin-bottom: 200px;
  border: 3px solid #fff;
  border-radius: 20px;
  padding: 15px 30px;
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  /* 글자그림자: x y 블러 색 */
  text-shadow: 1px 1px 1px #000;
  /* 박스그림자: (내부) x y 블러 (크기) 색
    -> 박스그림자를 이용한 글로우효과주기!
    그림자색을 밝은 형광계열색을 준다!
    내부옵션 inset을 주면 안쪽그림자(글로우)효과 
    -> 콤마로 그림자를 여러개 줄 수 있음*/
  box-shadow: inset 0 0 20px blue, inset 0 0 50px 10px cyan;
}

/* 로봇설명 제목 */
#dcbx h2 {
  position: sticky;
  top: 0;
  /* sticky 포지션에서 top값을 주면
    보이는 화면의 위치를 체크하여
    그 위치에 올때 fixed처럼 화면에 
    고정해 준다! */
  font-size: 35px;
  text-align: center;
  color: lime;
  background-color: rgba(255, 255, 255, 0.4);
  border-radius: 20px;
}

/* 로봇 출처 */
#dcbx small {
  display: block;
  text-align: center;
  color: #ff0;
  font-size: 12px;
  /* 최소글자크기 한계는 10px */
}

/* 설명문단 */
#dcbx p {
  /* 기본글자크기는 일반적으로 16px */
  font-size: 15px;
  /* 줄간격: 배수/단위 등 */
  line-height: 1.8;
  /* 자간 */
  letter-spacing: 1px;
  /* 단어간격 */
  word-spacing: 2px;

  /*  가독성을 위한 다단설정 */
  /* 다단표시(다중열속성) */

  /* 다중열개수 */
  column-count: 3;
  /* 다중열구분선
    -> 보더설정값과 같음(두께 종류 색상) */
  column-rule: 5px dotted lightgreen;
  /* 다중열사이간격
    -> 구분선 오른쪽 간격조정 */
  column-gap: 55px;

  /* 문단정렬: 양쪽정렬 */
  text-align: justify;
  /* 단어깨기 */
  word-break: break-all;
  /* 1byte문자인 영어는 기본적으로
    단어단위로 같이 구분되어 있으므로
    문단에서 단어가 못들어가면 아랫줄로
    내려가서 중간이나 끝에 비어보임!
    이때 단어깨기설정을 해야 단어가
    글자단위로 모두 정렬될 수 있다! */

  /* 첫줄 들여쓰기 */
  text-indent: 20px;
}
/* 가상요소로 첫글자 디자인변경 */
#dcbx p::first-letter {
  font-size: 30px;
  font-weight: bold;
  color: lightsalmon;
}
/* 하단영역 */
.info {
  padding: 50px;
  text-align: center;
  color: #fff;
  /* 글자설정 한번에! */
  font: 30px "Black Ops One", cursive;
  /* 글자그림자 */
  text-shadow: 2px 2px 2px #000;
  /* 배경반투명 */
  background-color: rgba(0, 0, 0, 0.5);
}

/* 가상요소로 아이콘넣기 */
.info span::before {
  content: "";
  display: inline-block;
  vertical-align: -5px;
  width: 30px;
  height: 30px;
  border: 2px solid #ccc;
  border-radius: 50%;
  /* 배경 */
  background: pink url(../images/robot_03.png) no-repeat;
  background-position: -11px -3px;
  background-size: 60px;
}
